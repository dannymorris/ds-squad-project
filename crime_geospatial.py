# -*- coding: utf-8 -*-
"""crime_geospatial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YDH2TWoq7c-lDNbsipjESTmYmd1OC95H
"""

!pip install geopandas

#Importing libraries
import pandas as pd
import geopandas as gpd
import numpy as np

#Importing crime data and opening the weather data file:
#!wget https://data.buffalony.gov/api/views/d6g9-xbgu/rows.csv?accessType=DOWNLOAD;
#Reading the crime data into a pandas dataframe :
crime_df = pd.read_csv('/content/rows.csv?accessType=DOWNLOAD')
#converting the incident_datetime column into datetime format:
crime_df['incident_datetime']=pd.to_datetime(crime_df['incident_datetime'])
# Sorting the data by time :
crime_df.sort_values('incident_datetime',inplace=True)
# Creating a new neighborhood column with empty values :
crime_df['neighborhood']=np.nan

#Reading the geojson data provided by https://data.buffalony.gov "https://data.buffalony.gov/Economic-Neighborhood-Development/Neighborhoods/q9bk-zu3p" :
polygon = gpd.read_file("/content/Neighborhoods.geojson")
# Converting the pandas dataframe into a geopandas dataframe(has higher support for geospatial data) :
gdf = gpd.GeoDataFrame( crime_df, geometry=gpd.points_from_xy(crime_df.longitude, crime_df.latitude))

#For loop going through all the neighborhoods, checking if each coordinate is in that neighborhood and assigning a boolean:
for i in range(len(polygon)):
# mask looks at the polygon geometry of each neighborhood and maps it :
    mask =  (polygon.loc[i, 'geometry'])
# This line checks if the coordinates in crime_df are inside the mask  and outputs a boolean list:
    pip_mask_geofence = gdf.within(mask)
    gdf['geofence'] = pip_mask_geofence
# Replace all values of the new column 'neighborhood'(not neighborhood_1) with the respective neighborhood name from polygon:
    gdf.loc[gdf['geofence'] == True, 'neighborhood'] = polygon['nbhdname'][i]


gdf.sort_values('incident_datetime',inplace=True)
gdf.drop('geofence',axis=1,inplace=True)
gdf.drop('geometry',axis=1,inplace=True)

#I removed the last 5 rows as they didnt have coordinates either:
gdf[-50:-5]

# checking null values:
gdf.isna().sum()

